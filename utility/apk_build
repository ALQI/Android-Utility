#! /bin/bash

# Apktool Build Script
# Author: Tommy Nguyen [tommytomatoe]
# Version: 1.1.0
# Date: February 13, 2012
# Contact: tommytomatoe@gmail.com

# Setting Loop Variable
clear
APPLE=$1
LOG=false

# Functions

#enterKey
enterKey()
{	echo "### Press [enter] to continue, any other key to quit";
	read -s -n 1 key
	if [[ $key = "" ]]; then 
  		echo 
	else
  		echo
  		echo "Installation aborted";
		enter
		apk_tool
	fi
}

#enter
enter()
{	echo
	echo "Please press [enter] to continue";
	read -s -n 1 key
	if [[ $key = "" ]]; then 
  		echo
		clear
	fi
}

#enter
enterA()
{	echo
	echo "Please press [enter] when ready";
	read -s -n 1 key
	if [[ $key = "" ]]; then 
  		echo
	fi
}

#load
load_dot ()
{	echo -n "."
	sleep .1
	echo -n "."
	sleep .1
	echo -n "."
	sleep .1
	echo -n "."
	sleep .1
	echo -n "."
	sleep .1
	echo "."
}

#quit
quit()
{	echo
	echo "Thank you for choosing Android Utility"
	echo "brought to you by tommytomatoe :-)"
	echo
	echo "Please Don't Drink and Drive"
	echo
	exit
}

#select
selection ()
{	echo
	echo "You've selcted [$COM]"
	echo
}

#Build
build ()
{	COM="apktool b[uild]"
	d=$HOME/android-utility/working-folder/mod-here-solo
	clear
	a=`ls -R $d | grep apktool.yml`
	if [[ "$?" == "0" ]] ; then
		echo -n "Android Utility found this project: "
		ls $d | grep -v .apk | grep -vE '(.apk|original_META)'
		echo
		echo "Would you like to build it? [default=Yes]"
		echo
		echo "  1. Yes"
		echo "  2. No"
		echo
		cd $d
		read -s -n 1 ans
		case $ans in 
		1) do_it_s;;
		2) enter;;
		*) do_it_s;;
		esac
	else
		clear
		echo "Android Utility did not find a valid project"
		enter
	fi
	enter
}

#decode Multi
build_m ()
{	COM="apktool d[ecode]"
	d=$HOME/android-utility/working-folder/mod-here-multi
	clear
	# creating directories
	if [[ -s $d/new_apps_unsigned ]] ; then
		echo &>/dev/null
	else
		mkdir $d/new_apps_unsigned
	fi
	if [[ -s $d/original_apps ]] ; then
		echo &>/dev/null
	else
		mkdir $d/original_apps
	fi
	a=`ls -R $d | grep apktool.yml`
	if [[ "$?" == "0" ]] ; then
		echo "Android Utility found these Projects: "
		echo
		cd $d/Projects
		for projectName in `ls | grep -vE '(.apk|original|decompressed|new_apps)'`
		do
		    i=$(($i+1))
		    projectArray[$i]=$projectName
		    echo "  $i. $projectName" >> temp.list
		done
		more temp.list
		rm -f temp.list
		echo
		echo -n "Please enter number of Project (all=0, default=all, quit=q): "
		read ans
		echo
		if [ "$ans" == "0" ]; then
			do_it_m
		fi
		if [ "$ans" == "" ]; then
			do_it_m
		fi	
		if [ "$ans" == "q" ]; then
			exit 0
		fi
		if [ "`echo $ans | sed 's/[0-9]*//'`" == "" ] || [ "ans"=="1" ]; then
			projectBuild=${projectArray[$ans]}
			if [ "$projectBuild" == "" ]; then
				exit 0
			fi
		else
			exit 0
		fi
		apktool b $projectBuild ../new_apps_unsigned/$projectBuild.apk
		# moving apks
		cd $HOME/android-utility/working-folder/mod-here-multi
		count=`ls -1 *.apk 2>/dev/null | wc -l`
		if [ $count != 0 ]; then
		for c in *.apk
		do 
			mv -v $c original_apps/
		done
		fi
		echo
		load_dot
		echo
		metaAlign
		else
			echo
			clear
			echo "Android Utility did not find a valid project"
			enter
		fi
	enter
}

#do it
do_it_s ()
{	for b in `ls $d | grep -vE '(.apk|original_META|new_app)'`
	do
	echo "Building $b "
	echo 
	apktool b -f $b
	if [[ "$?" -ne "0" ]] ; then
		echo "On `date +%b%e_%H%M%S`, $b was not built Properly" >> $HOME/android-utility/log/build_log
		LOG=true
	fi
	if [[ "$LOG" = "true" ]] ; then
		echo
		echo "Please check build_log for apk with errors"
		echo
	fi
	done
}

#do it
do_it_m ()
{	echo
	d=$HOME/android-utility/working-folder/mod-here-multi
	# creating directories
	if [[ -s new_apps_unsigned ]] ; then
		echo &>/dev/null
	else
		mkdir new_apps_unsigned
	fi
	if [[ -s original_apps ]] ; then
		echo &>/dev/null
	else
		mkdir original_apps
	fi
	
	# actual building process
	cd $d/Projects
	for b in `ls | grep -vE '(.apk|original|decompressed|new_apps)'`
	do
		echo "Building $b "
		echo 
		apktool b -f $b ../new_apps_unsigned/$b.apk
		if [[ "$?" -ne "0" ]] ; then
		echo "On `date +%b%e_%H%M%S`, $b was not built Properly" >> $HOME/android-utility/log/build_log
		LOG=true
		fi
		echo
	done

	# moving apks
	cd $d
	count=`ls -1 *.apk 2>/dev/null | wc -l`
	if [ $count != 0 ]; then
	for c in *.apk
	do 
		echo "Moving $c to original_apps"
		mv -f $c original_apps/
	done
	fi
	cd $d/Projects
		if [[ "$LOG" = "true" ]] ; then
		echo
		echo "Please check build_log for apk with errors"
		fi
	echo
	load_dot
	echo
	metaAlign
	enter
}

metaAlign ()
{
		echo -n "Would you like to auto-inject META-INF at this time (equivalent to resigning a system apk)? [Y/n] "
		read -s -n 1 ans
		case $ans in
		n|N) echo ; echo ; echo "Cancelling META-INF injection"; echo; echo "Find new apps in new_apps_unsigned";;
		*) echo ; sign_it_sys;;
		esac
		echo
		load_dot
		echo
		if [[ zipStat -eq 1 ]] ; then
		echo "Beginning auto-zipalign"
		zipo
		fi
		zipStat=
}

sign_it_sys ()
{	if ! [[ -s $d/new_apps_unsigned ]] ; then
		mkdir $d/new_apps_unsigned
	fi
	echo 
	echo "This will auto-inject the original META-INF into the new apks"
	echo	
	echo "Please place unsigned apks inside mod-here-multi/new_apps_unsigned"
	if ! [[ -s $d/original_META-INF ]] ; then
		echo "You did not extract the META-INF during the decomple process."
		enter
		exit
	fi
	echo
	load_dot
	echo
	if ! [[ -s $d/new_apps_Signed ]] ; then
		echo 'Creating new folder "new_apps_Signed"'
		mkdir $d/new_apps_Signed
	fi 
	cd $d/new_apps_unsigned
	cp -f * $d/new_apps_Signed
	cd $d/new_apps_unsigned/
	for a in *.apk ; do
		echo
		echo "Preparing to auto-inject singature for $a"
		cd $d/original_META-INF/$a-META-INF
		zip $d/new_apps_Signed/$a META-INF/*
		echo "done with $a"
	done
	zipStat=1
}

zipo ()
{
if [[ -s $d/temp ]] ; then
	echo &>/dev/null
else
	mkdir $d/temp
fi
cd $d/new_apps_Signed
echo
echo "Preparing to zipalign `ls | grep -c .apk` apk files"
echo
load_dot
echo
for z in *.apk ; do
	zipalign -fv 4 $z $d/temp/$z
	mv -f $d/temp/$z $d/new_apps_Signed
done
rm -r $d/temp
echo
load_dot
clear
echo
cd $d/new_apps_Signed
echo "Successfully zipaligned `for F in *.apk ; do zipalign -cv 4 $F ; done | grep -c "Verification succesful"` apk files. Congrats!"
echo "Failed to zipalign `for F in *.apk ; do zipalign -cv 4 $F ; done | grep -c "Verification FAILED"` apk files."
echo
echo "Find new apks in new_apps_Signed"
}


one_time ()
{		
	echo	
	echo
	cd $HOME/android-utility/working-folder/mod-here-multi/Projects
	for projectName in `ls | grep -vE '(.apk|original|decompressed|new_apps)'`
	do
	    i=$(($i+1))
	    projectArray[$i]=$projectName
	    echo "  $i. $projectName" >> temp.list
	done
	more temp.list
	rm -f temp.list
	echo
	echo -n "Please enter number of Project (quit=0, default=1): "
	read ans
	echo
	if [ "$ans" == "0" ]; then
		exit 0
	fi
	if [ "$ans" == "" ]; then
		ans=1
	fi	
	if [ "`echo $ans | sed 's/[0-9]*//'`" == "" ] || [ "ans"=="1" ]; then
		projectBuild=${projectArray[$ans]}
		if [ "$projectBuild" == "" ]; then
			exit 0
		fi
	else
		exit 0
	fi
	testBuild=`apktool b $projectBuild`
	if [[ "$?" == "0" ]] ; then
		apktool b $projectBuild ../new_apps_unsigned/$projectBuild.apk
	else
		echo
		echo "Please enter a valid project name"
		enter
	fi

	# moving apks
	cd $HOME/android-utility/working-folder/mod-here-multi
	if [ -e *.apk ] ; then
	for c in *.apk
	do 
		mv -v $c original_apps/
	done
	fi
	echo
	load_dot
	echo
	echo -n "Would you like to auto-inject META-INF at this time (equivalent to resigning a system apk)? [Y/n] "
	read -s -n 1 ans
	case $ans in
	n|N) echo ; echo ; echo "Cancelling META-INF injection";;
	*) echo ; sign_it_sys;;
	esac
	echo
	load_dot
	echo
	if [[ zipStat -eq 1 ]] ; then
	echo -n "Would you like to auto-zipalign at this time? [Y/n] "
	read -s -n 1 ans
	case $ans in
	n|N) echo ; echo ; echo "Cancelling zipalignment" ;;
	*) echo ; zipo ;;
	esac
	fi
	zipStat=
}




if [[ "$1" == "" ]] ; then
	build
elif [[ "$1" == "-m" ]] ; then
	build_m
fi

